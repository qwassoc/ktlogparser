<?php

/// \file
/// \brief
/// KT* Log Parser
///
/// Parses logs generated by QuakeWorld server mods:
/// - Kombat Teams
/// - KTPro
/// - KTX

// set this to 0 to turn off debug messages, set to 1 to allow basic debug messages,
// higher value for more verbose debug messages
define (KTLP_DEBUG, 0);

define (KTLP_ERR_OK, 0);
define (KTLP_ERR_FILEOPEN, -1);

define (KTLP_ST_PREGAME, 0);
define (KTLP_ST_GAME, 1);
define (KTLP_ST_PLAYERS, 2);
define (KTLP_ST_MATCH, 3);
define (KTLP_ST_TEAMS, 4);

define (KTLP_LOGTYPE_UNKNOWN, 0);
define (KTLP_LOGTYPE_KTX, 1);

error_reporting(E_ALL+E_STRICT);

class KTLP_PlayerStatsParser
{
	var $result;
	var $debug;
	var $curplayer;
	var $curteam;
	var $logtype;

	function DPrint($lev,$str) {
		if ($this->debug >= $lev) {
			echo "<p><code>".htmlspecialchars($str)."</code></p>";
		}
	}

	function KTLP_PlayerStatsParser($dbg) {
		$this->result = array();
		$this->debug = $dbg;
		$this->curplayer = "";
		$this->curteam = "";
		$this->logtype = KTLP_LOGTYPE_UNKNOWN;
	}
	
	// Player stats
	function EatLine($line)
	{
		$this->DPrint(1,"Player stats line: $line");
		if (preg_match("/^Frags \(rank\) friendkills \. efficiency$/",$line)) {
			$this->logtype = KTLP_LOGTYPE_KTX;
			$this->DPrint(1,"KTX logtype recognized");
		}
		else {
			if ($this->logtype == KTLP_LOGTYPE_KTX) {
				$matches = array();
				if (preg_match("/^Team \[(.*)\]:$/",$line,$matches)) {
					$this->DPrint(1,"Team $matches[1] matched");
					$this->curteam = $matches[1];
				}
				else if (preg_match("/^_+$/",$line)) {
					$this->curplayer = "";
				}
				else if (preg_match("/^_ (.*):$/",$line,$matches)) {
					$this->DPrint(1,"Player $matches[1] matched");
					$this->curplayer = $matches[1];
					$this->result[$this->curplayer] = array();
				}
				else if (preg_match("/^$/",$line)) {
					// skip blank line
				}
				else if ($this->curplayer) {
					if (preg_match("/^(.*): (.*)$/",$line,$matches)) {
						$key = strtolower(trim($matches[1]));
						$val = trim($matches[2]);
						if ($key == "wp") {
							if (preg_match_all("/\s*(\D+)(\S+)\s*/",$val,$matches)) {
								$val = array();
								for ($i=0; $i < count($matches[0]); $i++) {
									$val[$matches[1][$i]] = $matches[2][$i];
								}
							}
						}
						else if ($key == "spawnfrags") {
							if (preg_match("/(\d+)/",$line,$matches)) {
								$val = $matches[1];
							}
						}
						else {
							if (preg_match_all("/\s*(\D+):(\S+)\s*/",$val,$matches)) {
								$val = array();
								for ($i=0; $i < count($matches[0]); $i++) {
									$val[$matches[1][$i]] = $matches[2][$i];
								}
							}
						}
						$this->result[$this->curplayer][$key] = $val;
					}
					// 51 (5) 2 52.6%
					else if (preg_match("/^(\d+) \((\S+)\) (\d+) (.*)%$/",$line,$matches)) {
						$this->result[$this->curplayer]["frags"] = $matches[1];
						$this->result[$this->curplayer]["rank"] = $matches[2];
						$this->result[$this->curplayer]["friendkills"] = $matches[3];
						$this->result[$this->curplayer]["efficiency"] = $matches[4];
					}
					else {
						$this->result[$this->curplayer][] = $line;
					}
				}
			}
		}
	}
	
	function GetResult()
	{
		return $this->result;
	}
}

class KTLP_Parser
{
	var $parsestate;
	var $output;
	var $err;
	var $debug;
	var $PlayerStatsParser;
	
	function KTLP_Parser($dbg)
	{
		$this->parsestate = KTLP_ST_PREGAME;
		$this->err = KTLP_ERR_OK;
		$this->output = array();
		$this->debug = $dbg;
		$this->PlayerStatsParser = new KTLP_PlayerStatsParser($dbg);
	}
	
	function DPrint($lev,$str) {
		if ($this->debug >= $lev) {
			echo "<p><code>".htmlspecialchars($str)."</code></p>";
		}
	}
	
	// not implemented,
	// maybe just save the chat
	function EatLinePreGame($line) {} 
	
	// not implemented,
	// add parsing of frag messages, counting of mm2 messages, ... what else?
	function EatLineGame($line) {}
		
	// not implemented,
	function EatLineMatch($line) {}
	
	// not implemented
	function EatLineTeams($line) {}
	
	function EatLine($line)
	{
		$this->DPrint(2,"Eating line ".$line);
		if (preg_match("/^The match has begun!$/",$line)) {
			$this->parsestate = KTLP_ST_GAME;
			$this->DPrint(1,"Match begin matched");
		}
		else if (preg_match("/^Player statistics:$/",$line)) {
			$this->parsestate = KTLP_ST_PLAYERS;
			$this->DPrint(1,"Player statistics matched");
		}
		else if (preg_match("/^\[(.*)\] vs \[(.*)\] match statistics:$/",$line)) {
			$this->parsestate = KTLP_ST_MATCH;
			$this->DPrint(1,"Match statistics matched");
		}
		else if (preg_match("/^Team scores:/",$line)) {
			$this->parsestate = KTLP_ST_TEAMS;
			$this->DPrint(1,"Team scores matched");
		}
		else if (preg_match("/^The match is over$/",$line)) {
			$this->parsestate = KTLP_ST_PREGAME;
			$this->DPrint(1,"Match end matched");		
		}
		else {
			switch ($this->parsestate) {
			case KTLP_ST_PREGAME: $this->EatLinePreGame($line); break;
			case KTLP_ST_GAME: $this->EatLineGame($line); break;
			case KTLP_ST_PLAYERS: $this->PlayerStatsParser->EatLine($line); break;
			case KTLP_ST_MATCH: $this->EatLineMatch($line); break;
			case KTLP_ST_TEAMS: $this->EatLineTeams($line); break;
			default:
			DPrint(1,"Unknown state cannot be handled!");
			}
		}
		return true;
	}
	
	function Result() {
		$this->output["players"] = $this->PlayerStatsParser->GetResult(); 
		return $this->output;
	}
	function Error() { return $this->err; }
}

class KTLogParser
{
	var $err;
	
	function KTLogParser()
	{
		$this->err = KTLP_ERR_OK;
	}
	
	// returns NULL on error
	function Parse($file)
	{
		$this->err = KTLP_ERR_OK;
		$f = fopen($file,"r");
		if (!$f) {
			$this->err = KTLP_ERR_FILEOPEN; 
			return NULL;
		}
		
		$parser = new KTLP_Parser(KTLP_DEBUG);
		
		while (!feof($f)) {
			$l = fgets($f);	// reads one line
			$l = trim($l);
			if (!$parser->EatLine($l)) {
				$this->err = $parser->Error();
				return NULL;
			}
		}
		
		fclose($f);
		
		return $parser->Result();
	}
	
	function ErrorDesc()
	{
		switch ($this->err) {
		case KTLP_ERR_FILEOPEN: return "File Open Error";
		default: return "Unknown Error";
		}
	}
}


?>
